#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# Tools
def _colorize(text, color_code)
  "\e[#{color_code}m#{text}\e[0m"
end

def _model(text)
  model = text.downcase
  name = ""
  model.split("_").each do |w|
    name += w.capitalize
  end
  puts _colorize(name, 33)
end

def _section(text)
  puts _colorize(text, 32)
end

# Info extractors

@db_name = nil

def model_inheritance(model)
  _section "[Inheritance]"
  parent_class = `grep class "app/models/#{model}.rb" | head -n 1 | cut -d '<' -f 2 | tr -d ' ' | tr -d '\n'`
  puts "  #{parent_class}"
  @db_name = parent_class.downcase if parent_class != "ActiveRecord::Base"
end

def model_validations(model)
  _section "[Validations]"
  puts `grep "validate" "app/models/#{model}.rb" || echo "Warning: No validation found"`
end

def model_associations(model)
  _section "[Associations]"
  associations = []
  associations << `grep "belongs_to" "app/models/#{model}.rb"`
  associations << `grep "has_many" "app/models/#{model}.rb"`
  associations << `grep "has_one" "app/models/#{model}.rb"`
  associations << `grep "has_and_belongs_to_many" "app/models/#{model}.rb"`
  associations.each do |a|
    puts a unless a.length < 3 # avoid empty lines
  end
end

def model_description(model)
  _section "[Table description]"

  model = @db_name unless @db_name.nil?
  file = File.new("db/schema.rb", "r")
  while (line = file.gets)
    if line.include?("  create_table \"#{model}s\"")
      puts line
      while (line = file.gets)
        puts line
        break if line == "  end\n"
      end
      break
    end
  end
  file.close
end

# Main

# ..Usage
if ARGV.count == 0
  $stderr.puts "Usage: rdesc model model2 ..."
  exit 1
end

# ..Look for the project's root path
back = "./"
maxdepth = 6
while maxdepth > 0
  break if File.exists?(back + "Gemfile")
  back += "../"
  maxdepth -= 1
end
if maxdepth == 0
  $stderr.puts "Error: no rails project found."
  exit 2
end
pwd = Dir.pwd
Dir.chdir back

# ..List
if ARGV.count == 1 and ARGV[0] == "-l"
  puts `cd app/models && ls *.rb | sed 's/\.rb//g'`
  exit 0
end

# ..Output
ARGV.each do |m|
  model = m.downcase
  options = %w(i a v d) # inheritance associations validations database
  if model.include?(":")
    o = model.split(":")
    if o.count != 2 || o.last.length == 0
      $stderr.puts "Error: bad filtering"
      exit 1
    end
    options = o.last.split("")
    model = o.first
  end
  if model.length > 3 && model[-3..-1] == ".rb"
    model = model[0...(model.length - 3)]
  end
  _model model
  puts ""

  if File.exists?("app/models/#{model}.rb")

    if options.include? "i"
      model_inheritance(model)
      puts ""
    end
    if options.include? "a"
      model_associations(model)
      puts ""
    end
    if options.include? "v"
      model_validations(model)
      puts ""
    end
    if options.include? "d"
      model_description(model)
    end
  else
    $stderr.puts "Model not found."
  end
  _model "---"
  puts ""
end

Dir.chdir pwd

exit 0
